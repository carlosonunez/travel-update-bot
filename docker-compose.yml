version: '2.2'
services:
  vendor:
    build:
      context: .
    entrypoint: sh
    volumes:
      - "$PWD/vendor:/vendor"
    command:
      - -c
      - >-
        bundle install &&
        cp -R /usr/local/bundle /vendor &&
        chmod -R +x /vendor/bundle/bin
  selenium-x86_64:
    image: selenium/standalone-chrome
    environment:
      ENVIRONMENT: test
    volumes:
      - /dev/shm:/dev/shm
    ports:
      - 4444:4444
      - 5901:5900
  selenium-arm64:
    image: seleniarm/standalone-chromium
    environment:
      ENVIRONMENT: test
    volumes:
      - /dev/shm:/dev/shm
    ports:
      - 4444:4444
      - 5901:5900
  ruby:
    build:
      context: .
      args:
        ENVIRONMENT: test
    env_file: .env

  # You will need to vendor your dependencies first before running unit tests.
  # scripts/unit does this for you automatically.
  unit:
    extends: ruby
    entrypoint: rspec
    environment:
      LOAD_PATH: "./spec/unit;./spec;./lib"
    volumes:
      - /dev/null:/dev/shm
    command:
      - --tag
      - unit
      - --fail-fast
      - --format
      - documentation
  integration-test-ping:
    extends: ruby
    command:
      - bin/flight-info.get_ping
  integration-test-test_internet_access:
    extends: ruby
    command:
      - bin/flight-info.test_internet_access
  integration-docker:
    extends: ruby
    entrypoint: rspec
    env_file: .env
    environment:
      LOAD_PATH: "spec/integration;spec;lib"
    volumes:
      - "$PWD/secrets:/secrets"
      - /var/run/docker.sock:/var/run/docker.sock
    command:
      - --tag
      - integration_docker
      - --fail-fast
      - --format
      - documentation
  integration:
    extends: ruby
    entrypoint: rspec
    env_file: .env
    volumes:
      - "$PWD/secrets:/secrets"
    command:
      - --tag
      - integration
      - --fail-fast
      - --format
      - documentation

