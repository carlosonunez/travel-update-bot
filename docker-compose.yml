version: '2.2'
services:
  vendor:
    build:
      context: .
    entrypoint: sh
    volumes:
      - "$PWD/vendor:/vendor"
    command:
      - -c
      - >-
        bundle install &&
        cp -R /usr/local/bundle /vendor &&
        chmod -R +x /vendor/bundle/bin
  selenium-x86_64:
    image: selenium/standalone-chrome
    environment:
      ENVIRONMENT: test
    volumes:
      - /dev/shm:/dev/shm
    ports:
      - 4444:4444
      - 5901:5900
  selenium-arm64:
    image: seleniarm/standalone-chromium
    environment:
      ENVIRONMENT: test
    volumes:
      - /dev/shm:/dev/shm
    ports:
      - 4444:4444
      - 5901:5900
  ruby:
    build:
      context: .
      args:
        ENVIRONMENT: test
    env_file: .env

  # You will need to vendor your dependencies first before running unit tests.
  # scripts/unit does this for you automatically.
  unit:
    extends: ruby
    entrypoint: rspec
    environment:
      LOAD_PATH: "./spec/unit;./spec;./lib"
    volumes:
      - /dev/null:/dev/shm
    command:
      - --tag
      - unit
      - --fail-fast
      - --format
      - documentation
  integration-test-ping:
    extends: ruby
    command:
      - bin/flight-info.get_ping
  integration-test-test_internet_access:
    extends: ruby
    command:
      - bin/flight-info.test_internet_access
  # Chrome is crashing within the container running inside of Lambda.
  # Need to get its output to see what's going on.
  integration-test-test_chromium_launch:
    extends: ruby
    command:
      - bin/flight-info.test_chromium_launch
  # Why do we need this?
  #
  # PhantomJS stopped rendering FlightAware sometime in 2020. Consequently, we now
  # have to use Chromium to scrape it.
  #
  # Unfortunately, fitting Chromium inside of a Lambda layer is challenging, and even if you manage
  # to get it to fit (and writing your own JIT decompression routine since you'll likely use
  # Brotli like the chrome-lambda Node project is doing), testing it locally is tough unless
  # you're using the lambci/lambda Docker image (which only works for x86_64 architectures...
  # more on that later).
  #
  # Fortunately, Lambda can now spawn Docker containers from OCI-compliant images in ECR. This
  # is a god-send for local testing, as you can now execute your code in the same environment
  # as what it will run in on the real thing. However, executing functions through the
  # Lambda Interface Emulator is not as straightforward as running them through ruby since
  # you're actually executing them like Lambda functions (i.e. through a handler invoked via HTTP).
  #
  # This series of tests confirms that:
  #
  # - The RIE and its requisite client are set up correctly, and
  # - That Selenium can talk to the instance of Chromium that's installed in our base image
  #   through the RIE.
  integration-docker:
    extends: ruby
    entrypoint: rspec
    env_file: .env
    environment:
      LOAD_PATH: "spec/integration;spec;lib"
      USE_LOCAL_LAMBDA: "true"
    volumes:
      - "$PWD/secrets:/secrets"
      - /var/run/docker.sock:/var/run/docker.sock
    command:
      - --tag
      - integration
      - --fail-fast
      - --format
      - documentation
  integration:
    extends: ruby
    entrypoint: rspec
    env_file: .env
    volumes:
      - "$PWD/secrets:/secrets"
    command:
      - --tag
      - integration
      - --fail-fast
      - --format
      - documentation

